/*
Copyright Â© 2022 Pavel Tisnovsky

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package main

import (
	"database/sql"
	"fmt"
	"os"

	_ "github.com/lib/pq" // PostgreSQL database driver

	"github.com/rs/zerolog"
	"github.com/rs/zerolog/log"
)

// DB connection parameters
const (
	driverName = "postgres"

	PGUsername = "postgres"
	PGPassword = "postgres"
	PGHost     = "localhost"
	PGPort     = "5432"
	PGDBName   = "cve"
	PGParams   = "sslmode=disable"
)

// SQL statements
const (
	StoreCVE = `
            INSERT INTO cve (name, description, cvss_score, severity)
	           VALUES   ($1, $2, $3, $4)
            ON CONFLICT(name)
	    DO UPDATE SET description=$2, cvss_score=$3, severity=$4;`

	StoreImageCommand = `
            INSERT INTO image (digest, health_index)
	           VALUES   ($1, $2)
            ON CONFLICT(digest)
	    DO UPDATE SET health_index=$2;`
)

// storeCve function stores new CVE or update the existing CVE if it's already
// stored in the database."""
func storeCve(statement *sql.Stmt, cve, description string, cvss int, severity string) error {
	_, err := statement.Exec(cve, description, cvss, severity)
	if err != nil {
		log.Err(err).Msg("Insert error")
		return err
	}

	return nil
}

// storeImage function stores new image info or update the existing image if
// it's already stored in the database."""
func storeImage(statement *sql.Stmt, digest, healthIndex string) error {
	_, err := statement.Exec(digest, healthIndex)
	if err != nil {
		log.Err(err).Msg("Insert error")
		return err
	}

	return nil
}

// storeImageLayer function stores new image layer info or update the existing
// image if it's already stored in the database."""
func storeImageLayer(connection *sql.DB, imageSHA, digest string, level int) error {
	imageId, err := selectImageID(connection, imageSHA)
	if err != nil {
		log.Err(err).Msg("Select error")
		return err
	}

	log.Info().Int("Image ID", imageId).Msg("Get image id")

	sqlStatement := `
            INSERT INTO image_layer (image_id, digest, level)
	           VALUES   ($1, $2, $3)
            ON CONFLICT(digest)
	    DO UPDATE SET digest=$2, level=$3;`

	_, err = connection.Exec(sqlStatement, imageId, digest, level)
	if err != nil {
		log.Err(err).Msg("Insert error")
		return err
	}

	return nil
}

func selectImageID(connection *sql.DB, imageSHA string) (int, error) {
	var id int

	err := connection.QueryRow("SELECT id FROM image WHERE digest=$1;", imageSHA).Scan(&id)
	if err != nil {
		log.Err(err).Msg("query")
		return -1, err
	}
	return id, nil
}

func main() {
	log.Logger = log.Output(zerolog.ConsoleWriter{Out: os.Stderr})
	log.Info().Msg("Started")

	dataSource := fmt.Sprintf(
		"postgresql://%v:%v@%v:%v/%v?%v",
		PGUsername,
		PGPassword,
		PGHost,
		PGPort,
		PGDBName,
		PGParams,
	)

	log.Info().Str("datasource", dataSource).Msg("Connecting to DB")

	// try to initialize connection to the storage
	connection, err := sql.Open(driverName, dataSource)

	// check if establishing a connection was successful
	if err != nil {
		log.Err(err).Msg("Can not connect to data storage")
		return
	}

	log.Info().Msg("Connection established")

	defer connection.Close()

	storeCveStmt, err := connection.Prepare(StoreCVE)
	if err != nil {
		log.Err(err).Msg("Prepare statement for storing CVE")
		return
	}

	storeImageStmt, err := connection.Prepare(StoreImageCommand)
	if err != nil {
		log.Err(err).Msg("Prepare statement for storing Image")
		return
	}

	err = storeCve(storeCveStmt, "2022-999", "new CVE", 3, "Medium")
	if err != nil {
		log.Err(err).Msg("store CVE")
	}

	err = storeImage(storeImageStmt, "sha256:114", "D")
	if err != nil {
		log.Err(err).Msg("store Image")
	}

	err = storeImageLayer(connection, "sha256:111", "sha256:bbb", 0)
	if err != nil {
		log.Err(err).Msg("store ImageLayer")
	}

	log.Info().Msg("Finished")
}
