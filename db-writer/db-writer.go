/*
Copyright Â© 2022 Pavel Tisnovsky

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package main

import (
	"crypto/sha256"
	"database/sql"
	"encoding/hex"
	"fmt"
	"hash"
	"os"
	"time"

	_ "github.com/lib/pq" // PostgreSQL database driver

	"github.com/rs/zerolog"
	"github.com/rs/zerolog/log"
)

// DB connection parameters
const (
	driverName = "postgres"

	PGUsername = "postgres"
	PGPassword = "postgres"
	PGHost     = "localhost"
	PGPort     = "5432"
	PGDBName   = "cve"
	PGParams   = "sslmode=disable"
)

// SQL statements
const (
	StoreCVECommand = `
            INSERT INTO cve (name, description, cvss_score, severity)
	           VALUES   ($1, $2, $3, $4)
            ON CONFLICT(name)
	    DO UPDATE SET description=$2, cvss_score=$3, severity=$4;`

	StoreImageCommand = `
            INSERT INTO image (digest, health_index)
	           VALUES   ($1, $2)
            ON CONFLICT(digest)
	    DO UPDATE SET health_index=$2;`

	StoreImageLayerCommand = `
            INSERT INTO image_layer (image_id, digest, level)
	           VALUES   ($1, $2, $3)
            ON CONFLICT(digest)
	    DO UPDATE SET digest=$2, level=$3;`

	SelectImageIDCommand = `
	    SELECT id FROM image WHERE digest=$1;`
)

// storeCve function stores new CVE or update the existing CVE if it's already
// stored in the database."""
func storeCve(statement *sql.Stmt, cve, description string, cvss int, severity string) error {
	_, err := statement.Exec(cve, description, cvss, severity)
	if err != nil {
		log.Err(err).Msg("Insert error")
		return err
	}

	return nil
}

// storeImage function stores new image info or update the existing image if
// it's already stored in the database."""
func storeImage(statement *sql.Stmt, digest, healthIndex string) error {
	_, err := statement.Exec(digest, healthIndex)
	if err != nil {
		log.Err(err).Msg("Insert error")
		return err
	}

	return nil
}

// storeImageLayer function stores new image layer info or update the existing
// image if it's already stored in the database."""
func storeImageLayer(statement *sql.Stmt, selectImageIDStmt *sql.Stmt, imageSHA, digest string, level int) error {
	imageId, err := selectImageID(selectImageIDStmt, imageSHA)
	if err != nil {
		log.Err(err).Msg("Select error")
		return err
	}

	// log.Info().Int("Image ID", imageId).Msg("Get image id")

	_, err = statement.Exec(imageId, digest, level)
	if err != nil {
		log.Err(err).Msg("Insert error")
		return err
	}

	return nil
}

func selectImageID(statement *sql.Stmt, imageSHA string) (int, error) {
	var id int

	err := statement.QueryRow(imageSHA).Scan(&id)
	if err != nil {
		log.Err(err).Msg("query")
		return -1, err
	}
	return id, nil
}

func genSha256Hash(hasher hash.Hash) string {
	hasher.Write([]byte("salt"))
	return hex.EncodeToString(hasher.Sum(nil))
}

func Connect() (*sql.DB, error) {
	dataSource := fmt.Sprintf(
		"postgresql://%v:%v@%v:%v/%v?%v",
		PGUsername,
		PGPassword,
		PGHost,
		PGPort,
		PGDBName,
		PGParams,
	)

	log.Info().Str("datasource", dataSource).Msg("Connecting to DB")

	// try to initialize connection to the storage
	return sql.Open(driverName, dataSource)
}

func benchmarkStoreCve(storeCveStmt *sql.Stmt, count int) {
	tStart := time.Now()

	severities := []string{
		"Low", "Important", "Moderate", "Low",
	}
	for i := 0; i < count; i++ {
		year := 2000 + (i / 1000)
		index := i % 10000
		cve := fmt.Sprintf("%04d-%04d", year, index)
		description := "CVE #" + cve
		cvssScore := (i * 7) % 10
		severity := severities[i%len(severities)]
		// fmt.Println(cve, description, cvssScore, severity)

		err := storeCve(storeCveStmt, cve, description, cvssScore, severity)
		if err != nil {
			log.Err(err).Msg("store CVE")
		}
	}

	elapsed := time.Since(tStart)

	log.Info().Msgf("Duration for %d inserts: %v", count, elapsed)
}

func benchmarkStoreImage(storeImageStmt *sql.Stmt, count int) {
	// simple SHA256 generator
	hasher := sha256.New()

	tStart := time.Now()

	indexes := []string{"A", "B", "C", "D", "E", "F"}

	for i := 0; i < count; i++ {
		healthIndex := indexes[i%len(indexes)]
		sha := genSha256Hash(hasher)
		// fmt.Println(healthIndex, sha)

		err := storeImage(storeImageStmt, sha, healthIndex)
		if err != nil {
			log.Err(err).Msg("store Image")
		}
	}

	elapsed := time.Since(tStart)

	log.Info().Msgf("Duration for %d inserts: %v", count, elapsed)
}

func benchmarkStoreImageLayer(storeImageStmt, storeImageLayerStmt, selectImageIDStmt *sql.Stmt, count int) {
	// simple SHA256 generator
	hasher := sha256.New()

	indexes := []string{"A", "B", "C", "D", "E", "F"}

	tStart := time.Now()

	for i := 0; i < count; i++ {
		healthIndex := indexes[i%len(indexes)]
		sha := genSha256Hash(hasher)

		err := storeImage(storeImageStmt, sha, healthIndex)
		if err != nil {
			log.Err(err).Msg("store Image")
		}

		for j := 0; j < 100; j++ {
			sha2 := genSha256Hash(hasher)
			err := storeImageLayer(storeImageLayerStmt, selectImageIDStmt, sha, sha2, (i+j)%10)
			if err != nil {
				log.Err(err).Msg("store Image Layer")
			}

		}
	}

	elapsed := time.Since(tStart)

	log.Info().Msgf("Duration for %d inserts: %v", count, elapsed)
}

func main() {
	// simple SHA256 generator
	// hasher := sha256.New()

	log.Logger = log.Output(zerolog.ConsoleWriter{Out: os.Stderr})
	log.Info().Msg("Started")

	connection, err := Connect()

	// check if establishing a connection was successful
	if err != nil {
		log.Err(err).Msg("Can not connect to data storage")
		return
	}

	log.Info().Msg("Connection established")

	defer connection.Close()

	// prepare statements

	storeCveStmt, err := connection.Prepare(StoreCVECommand)
	if err != nil {
		log.Err(err).Msg("Prepare statement for storing CVE")
		return
	}

	storeImageStmt, err := connection.Prepare(StoreImageCommand)
	if err != nil {
		log.Err(err).Msg("Prepare statement for storing Image")
		return
	}

	storeImageLayerStmt, err := connection.Prepare(StoreImageLayerCommand)
	if err != nil {
		log.Err(err).Msg("Prepare statement for storing Image layer")
		return
	}

	selectImageIDStmt, err := connection.Prepare(SelectImageIDCommand)
	if err != nil {
		log.Err(err).Msg("Prepare statement for selecting image ID")
		return
	}

	benchmarkStoreCve(storeCveStmt, 0)
	benchmarkStoreImage(storeImageStmt, 0)
	benchmarkStoreImageLayer(storeImageStmt, storeImageLayerStmt, selectImageIDStmt, 100)

	/*
		err = storeCve(storeCveStmt, "2022-999", "new CVE", 3, "Medium")
		if err != nil {
			log.Err(err).Msg("store CVE")
		}

		err = storeImage(storeImageStmt, "sha256:114", "D")
		if err != nil {
			log.Err(err).Msg("store Image")
		}

		err = storeImageLayer(storeImageLayerStmt, selectImageIDStmt, "sha256:111", "sha256:cbb", 10)
		if err != nil {
			log.Err(err).Msg("store ImageLayer")
		}
	*/

	log.Info().Msg("Finished")
}
