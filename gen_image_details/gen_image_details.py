#!/usr/bin/env python3

# Copyright Â© 2022 Pavel Tisnovsky
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
Script to generate JSON with image details information.
"""

import json
import string
import random
from datetime import timedelta, datetime
from argparse import ArgumentParser


# stub for the data structure to be serialized into JSON
image_details = {"data":[],
                 "page": 0,
                 "page_size": 100,
                 "total": 1}


def cli_arguments():
    """Retrieve all CLI arguments provided by user."""
    # First of all, we need to specify all command line flags that are
    # recognized by this tool.
    parser = ArgumentParser()

    parser.add_argument(
            "-o",
            "--output",
            dest="output",
            default="image_details.json",
            required=False,
            help="Output file")

    # Now it is time to parse flags, check the actual content of command line
    # and fill-in the object named `args`.
    return parser.parse_args()


def generate_id(length):
    """Generate ID of specified length."""
    letters = string.digits + "abcdef"
    return ''.join(random.choice(letters) for i in range(length))


def gen_package_version():
    """Generate package name + version."""
    p = random.choice([
        "acl",
        "add-apt-key",
        "usb-modeswitch",
        "vim-common",
        "vim-gtk",
        "vim-gui-common",
        "openssl-libs"])
    v = random.choice([
        "2.2.53-6",
        "1.1.1g-12"])
    return p, p + "-" + v


class ImageDetails:
    """ImageDetails class represents metainformation about one image to be stored in JSON file."""

    def __init__(self):
        """Construct new object representing image details."""
        id = generate_id(24)

        self._id = generate_id(24)
        self._links = {
                "rpm_manifest": {
                    "href": f"/v1/images/id/{id}/rpm-manifest"
                    },
                "vulnerabilities": {
                    "href": f"/v1/images/id/{id}/vulnerabilities-manifest"
                    }
                }
        self.architecture = random.choice(["amd64", "arm32", "aarch64", "m68k"])
        package, version = gen_package_version()


def main():
    """Entry point to this script."""
    # parse and process and command line arguments.
    args = cli_arguments()

    image_details["data"].append(ImageDetails().__dict__)

    with open(args.output, "w") as fout:
        json.dump(image_details, fout, indent=2)


if __name__ == "__main__":
    main()
